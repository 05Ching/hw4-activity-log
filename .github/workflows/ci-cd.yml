name: CI/CD Pipeline — Automated Testing (O Grade Final, Slack-safe)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  pull-requests: write

concurrency:
  group: ci-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact
  COVERAGE_THRESHOLD: 70

jobs:
  # 1) Versioning — 從所有 tag 萃取 vX.Y.Z 最大值後 +1，避免 v..1 問題
  versioning:
    name: Versioning (auto-bump)
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.compute.outputs.next_version }}
      tag_staging:  ${{ steps.compute.outputs.tag_staging }}
      tag_prod:     ${{ steps.compute.outputs.tag_prod }}
      release_note: ${{ steps.compute.outputs.release_note }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute next version (robust)
        id: compute
        shell: bash
        run: |
          set -euo pipefail
          HIGHEST=$(git tag -l | sed -nE 's/.*(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p' | sort -V | tail -n1 || true)
          if [[ -z "${HIGHEST:-}" ]]; then HIGHEST="v0.0.0"; fi
          VER="${HIGHEST#v}"; IFS='.' read -r MA MI PA <<< "$VER"
          MA=${MA:-0}; MI=${MI:-0}; PA=${PA:-0}; PA=$((PA+1))
          NEXT="v${MA}.${MI}.${PA}"
          echo "next_version=$NEXT"               >> "$GITHUB_OUTPUT"
          echo "tag_staging=staging-${NEXT}"      >> "$GITHUB_OUTPUT"
          echo "tag_prod=prod-${NEXT}"            >> "$GITHUB_OUTPUT"
          echo "release_note=Automated release ${NEXT} — CI/CD O-grade pipeline." >> "$GITHUB_OUTPUT"

  # 2) Build — 矩陣（Ubuntu/Windows × Node 18/20），跨平台打包
  build:
    name: Build — Node ${{ matrix.node }} / OS ${{ matrix.os }}
    needs: versioning
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        shell: bash
        run: npm ci || npm install

      - name: Build (simulated)
        shell: bash
        run: |
          echo "🏗️ Building on $RUNNER_OS / Node ${{ matrix.node }}..."
          echo "✅ Build finished."

      - name: Package build output
        shell: bash
        run: |
          echo "📦 Packaging..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -NoLogo -NoProfile -Command "if (Test-Path build.zip) { Remove-Item build.zip -Force }; Compress-Archive -Path * -DestinationPath build.zip -Force"
          else
            zip -r build.zip .
          fi
          ls -la

      - name: Upload artifact (Ubuntu + Node 20 only)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == 20 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build.zip
          overwrite: true
          retention-days: 7

  # 3) Unit Tests + Coverage + JUnit（mock），含 Slack 通知（無 Webhook 也不報錯）
  test-unit:
    name: Unit Tests + Coverage
    needs: build
    runs-on: ubuntu-latest
    outputs:
      pass: ${{ steps.coverage.outputs.pass }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run mock tests (simulated)
        shell: bash
        run: |
          echo "🧪 Running mock tests..."
          echo "✅ Mock test executed successfully!"
          mkdir -p coverage reports
          echo "Fake coverage report" > coverage/index.html
          echo "<testsuite><testcase name='mock test'/></testsuite>" > reports/junit.xml

      - name: Coverage threshold check
        id: coverage
        shell: bash
        run: |
          COVERAGE=100
          echo "Coverage = $COVERAGE%"
          if [[ "$COVERAGE" -lt "${{ env.COVERAGE_THRESHOLD }}" ]]; then
            echo "pass=false" >> "$GITHUB_OUTPUT"
          else
            echo "pass=true"  >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Upload JUnit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/

      - name: 📢 Notify Unit Test Result to Slack (safe)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
        run: |
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then
            echo "⚠️ SLACK_WEBHOOK_URL not set. Skipping Slack notification."
            exit 0
          fi
          STATUS="${{ job.status }}"
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="✅ Unit Tests passed in ${{ github.repository }}!"
          else
            MESSAGE="❌ Unit Tests failed in ${{ github.repository }}!"
          fi
          printf '%s' "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -sS -X POST -H 'Content-type: application/json' --data @payload.json "$SLACK_WEBHOOK_URL"

  # 4) Integration Tests（僅當 coverage 通過）
  test-integration:
    name: Integration Tests
    needs: test-unit
    if: ${{ needs.test-unit.outputs.pass != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Run mock integration tests
        shell: bash
        run: |
          echo "🔗 Running integration tests..."
          echo "✅ Integration tests passed."

      - name: 📢 Notify Integration Test Result to Slack (safe)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
        run: |
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then
            echo "⚠️ SLACK_WEBHOOK_URL not set. Skipping Slack notification."
            exit 0
          fi
          STATUS="${{ job.status }}"
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="✅ Integration Tests passed in ${{ github.repository }}!"
          else
            MESSAGE="❌ Integration Tests failed in ${{ github.repository }}!"
          fi
          printf '%s' "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -sS -X POST -H 'Content-type: application/json' --data @payload.json "$SLACK_WEBHOOK_URL"

  # 5) Deploy to Staging（tag 自動修復 + Slack 通知）
  deploy-staging:
    name: Deploy to Staging
    needs: [versioning, test-integration]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Create Staging Release (safe + sanitize tag)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_IN:  ${{ needs.versioning.outputs.tag_staging }}
          NOTE:    ${{ needs.versioning.outputs.release_note }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="$TAG_IN"
          if [[ -z "${TAG:-}" || ! "$TAG" =~ ^[A-Za-z0-9._-]+$ ]]; then
            TAG="staging-$(date +%Y%m%d%H%M%S)"
            echo "⚠️ Invalid/empty tag fixed → $TAG"
          fi
          echo "🚀 Creating Staging release: $TAG"
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --prerelease
          echo "✅ Staging release created: $TAG"

      - name: 📢 Notify Slack (staging deploy)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
        run: |
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then
            echo "⚠️ SLACK_WEBHOOK_URL not set. Skipping Slack notification."
            exit 0
          fi
          MESSAGE="🚀 Staging release deployed for ${{ github.repository }}."
          printf '%s' "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -sS -X POST -H 'Content-type: application/json' --data @payload.json "$SLACK_WEBHOOK_URL"

  # 6) Deploy to Production（需環境核准，含 Slack 通知）
  deploy-production:
    name: Deploy to Production
    needs: [versioning, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Create Production Release (safe + sanitize tag)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_IN:  ${{ needs.versioning.outputs.tag_prod }}
          NOTE:    ${{ needs.versioning.outputs.release_note }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="$TAG_IN"
          if [[ -z "${TAG:-}" || ! "$TAG" =~ ^[A-Za-z0-9._-]+$ ]]; then
            TAG="prod-$(date +%Y%m%d%H%M%S)"
            echo "⚠️ Invalid/empty tag fixed → $TAG"
          fi
          echo "🚀 Creating Production release: $TAG"
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --latest
          echo "✅ Production release created: $TAG"

      - name: 📢 Notify Slack (production deploy)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        shell: bash
        run: |
          if [[ -z "${SLACK_WEBHOOK_URL:-}" ]]; then
            echo "⚠️ SLACK_WEBHOOK_URL not set. Skipping Slack notification."
            exit 0
          fi
          MESSAGE="🎉 Production release created for ${{ github.repository }}."
          printf '%s' "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -sS -X POST -H 'Content-type: application/json' --data @payload.json "$SLACK_WEBHOOK_URL"
