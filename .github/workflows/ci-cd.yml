name: CI/CD Pipeline — Automated Testing (O Grade Final No-Error Version)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  pull-requests: write

concurrency:
  group: ci-pipeline-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact
  COVERAGE_THRESHOLD: 70

jobs:
  # 1️⃣ Versioning — 自動遞增版本號
  versioning:
    name: Versioning (auto-bump)
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.compute.outputs.next_version }}
      tag_staging:  ${{ steps.compute.outputs.tag_staging }}
      tag_prod:     ${{ steps.compute.outputs.tag_prod }}
      release_note: ${{ steps.compute.outputs.release_note }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute next version
        id: compute
        shell: bash
        run: |
          HIGHEST=$(git tag -l | sed -nE 's/.*(v[0-9]+\.[0-9]+\.[0-9]+).*/\1/p' | sort -V | tail -n1 || echo v0.0.0)
          VER="${HIGHEST#v}"
          IFS='.' read -r MA MI PA <<< "$VER"
          PA=$((PA+1))
          NEXT="v${MA}.${MI}.${PA}"
          echo "next_version=$NEXT" >> "$GITHUB_OUTPUT"
          echo "tag_staging=staging-${NEXT}" >> "$GITHUB_OUTPUT"
          echo "tag_prod=prod-${NEXT}" >> "$GITHUB_OUTPUT"
          echo "release_note=Automated release ${NEXT} — CI/CD O-grade pipeline." >> "$GITHUB_OUTPUT"

  # 2️⃣ Build (Matrix: Ubuntu/Windows × Node 18/20)
  build:
    name: Build — Node ${{ matrix.node }} / OS ${{ matrix.os }}
    needs: versioning
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Simulate build
        shell: bash
        run: |
          echo "🏗️ Building project on $RUNNER_OS..."
          echo "✅ Build complete."
      - name: Package build
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -NoProfile -Command "Compress-Archive -Path * -DestinationPath build.zip -Force"
          else
            zip -r build.zip .
          fi
      - name: Upload artifact (Ubuntu + Node 20 only)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == 20 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build.zip
          overwrite: true

  # 3️⃣ Unit Tests + Coverage (mock)
  test-unit:
    name: Unit Tests + Coverage
    needs: build
    runs-on: ubuntu-latest
    outputs:
      pass: ${{ steps.coverage.outputs.pass }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Run mock tests
        shell: bash
        run: |
          echo "🧪 Running mock unit tests..."
          echo "✅ Mock tests passed."
          mkdir -p coverage reports
          echo "Fake coverage" > coverage/index.html
          echo "<testsuite><testcase name='mock test'/></testsuite>" > reports/junit.xml
      - name: Check coverage
        id: coverage
        shell: bash
        run: |
          COVERAGE=100
          echo "Coverage = $COVERAGE%"
          if [[ "$COVERAGE" -lt "${{ env.COVERAGE_THRESHOLD }}" ]]; then
            echo "pass=false" >> "$GITHUB_OUTPUT"
          else
            echo "pass=true" >> "$GITHUB_OUTPUT"
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      - uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/
      - name: 📢 Slack Notify (unit tests)
        if: always()
        shell: bash
        run: |
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "⚠️ No Slack webhook found, skipping notification."
            exit 0
          fi
          STATUS="${{ job.status }}"
          if [ "$STATUS" == "success" ]; then
            MESSAGE="✅ Unit tests passed for ${{ github.repository }}"
          else
            MESSAGE="❌ Unit tests failed for ${{ github.repository }}"
          fi
          echo "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -s -X POST -H 'Content-type: application/json' \
            --data @payload.json \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "⚠️ Slack send failed, skipping."

  # 4️⃣ Integration Tests
  test-integration:
    name: Integration Tests
    needs: test-unit
    if: ${{ needs.test-unit.outputs.pass != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "🔗 Running integration tests..."
      - run: echo "✅ Integration tests passed."
      - name: 📢 Slack Notify (integration)
        if: always()
        shell: bash
        run: |
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "⚠️ No Slack webhook, skipping."
            exit 0
          fi
          MESSAGE="✅ Integration tests completed for ${{ github.repository }}"
          echo "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -s -X POST -H 'Content-type: application/json' \
            --data @payload.json \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "⚠️ Slack send failed."

  # 5️⃣ Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: [versioning, test-integration]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create staging release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="staging-$(date +%Y%m%d%H%M%S)"
          NOTE="Automated release ${TAG} — CI/CD O-grade pipeline."
          gh release create "$TAG" build.zip --notes "$NOTE" --prerelease
          echo "✅ Staging release created: $TAG"
      - name: 📢 Slack Notify (staging)
        shell: bash
        run: |
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "⚠️ No Slack webhook, skipping."
            exit 0
          fi
          MESSAGE="🚀 Staging release deployed for ${{ github.repository }}"
          echo "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -s -X POST -H 'Content-type: application/json' \
            --data @payload.json \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "⚠️ Slack send failed."

  # 6️⃣ Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create production release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="prod-$(date +%Y%m%d%H%M%S)"
          NOTE="Production release ${TAG} — CI/CD O-grade pipeline."
          gh release create "$TAG" build.zip --notes "$NOTE" --latest
          echo "✅ Production release created: $TAG"
      - name: 📢 Slack Notify (production)
        shell: bash
        run: |
          if [ -z "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "⚠️ No Slack webhook, skipping."
            exit 0
          fi
          MESSAGE="🎉 Production release successfully created for ${{ github.repository }}"
          echo "{\"text\":\"$MESSAGE\"}" > payload.json
          curl -s -X POST -H 'Content-type: application/json' \
            --data @payload.json \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || echo "⚠️ Slack send failed."
