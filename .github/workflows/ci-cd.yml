name: CI/CD Pipeline — Outstanding (O Grade)

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Semver bump type: major | minor | patch'
        required: true
        default: 'patch'
      note:
        description: 'Release notes (optional)'
        required: false
  push:
    branches: [ main, master ]

permissions:
  contents: write
  deployments: write
  pull-requests: write

# 新的 run 會自動取消舊的，避免「Waiting for another workflow」
concurrency:
  group: advanced-cicd-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact
  LINT_CMD: npm run lint --if-present
  TEST_CMD: npm test --if-present

jobs:
  # 1) Versioning：讀 vX.Y.Z 最新 tag，依 bump 自動 +1；產生 staging/prod 標籤與釋出說明
  versioning:
    name: Versioning (auto-bump)
    runs-on: ubuntu-latest
    outputs:
      base_version: ${{ steps.compute.outputs.base_version }}
      next_version: ${{ steps.compute.outputs.next_version }}
      tag_staging:  ${{ steps.compute.outputs.tag_staging }}
      tag_prod:     ${{ steps.compute.outputs.tag_prod }}
      release_note: ${{ steps.compute.outputs.release_note }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next version
        id: compute
        env:
          BUMP: ${{ github.event.inputs.bump || 'patch' }}
          NOTE_IN: ${{ github.event.inputs.note }}
        run: |
          set -euo pipefail
          # 只找符合 vX.Y.Z 的 tag；沒有就從 v0.0.0 起算
          LATEST=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          if [ -z "${LATEST:-}" ]; then
            LATEST="v0.0.0"
          fi

          VER="${LATEST#v}"
          IFS='.' read -r MA MI PA <<< "$VER"
          case "${BUMP}" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch|*) PA=$((PA+1)) ;;
          esac

          NEXT="v${MA}.${MI}.${PA}"
          STAGING="staging-${NEXT}"
          PROD="prod-${NEXT}"
          NOTE="${NOTE_IN:-Automated release ${NEXT} — CI/CD advanced pipeline.}"

          echo "base_version=${LATEST}"       >> "$GITHUB_OUTPUT"
          echo "next_version=${NEXT}"         >> "$GITHUB_OUTPUT"
          echo "tag_staging=${STAGING}"       >> "$GITHUB_OUTPUT"
          echo "tag_prod=${PROD}"             >> "$GITHUB_OUTPUT"
          echo "release_note=${NOTE}"         >> "$GITHUB_OUTPUT"

  # 2) Build（Matrix：Node 18 & 20）→ 僅 Node 20 上傳 artifact，避免 409 衝突
  build:
    name: Build (lint + test) — Node ${{ matrix.node }}
    needs: versioning
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install deps
        run: npm ci || npm i

      - name: Lint
        run: ${{ env.LINT_CMD }}

      - name: Test
        run: ${{ env.TEST_CMD }}

      - name: Build/Package
        run: |
          npm run build --if-present || echo "No build script, packaging repo…"
          zip -r build.zip .

      # ✅ 只在 Node 20 這條 lane 上傳同名 artifact，其他 lane 不上傳 → 不會 409
      - name: Upload artifact (Node 20 only)
        if: ${{ matrix.node == 20 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build.zip
          if-no-files-found: error
          retention-days: 7
          overwrite: true

  # 3) Deploy to Staging：同一份 artifact；失敗自動清理；使用 environment secret 發 Slack
  deploy-staging:
    name: Deploy to Staging
    needs: [versioning, build]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Create Staging Release
        id: release_staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG:  ${{ needs.versioning.outputs.tag_staging }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          set -e
          echo "Releasing $TAG"
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          if ! gh release create "$TAG" build.zip --notes "$NOTE" --prerelease ; then
            echo "Release failed, cleaning up…"
            gh release delete "$TAG" -y >/dev/null 2>&1 || true
            git tag -d "$TAG" 2>/dev/null || true
            echo "fail" > result.txt
            exit 1
          else
            echo "success" > result.txt
          fi

      - name: Slack notify (staging)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TAG:  ${{ needs.versioning.outputs.tag_staging }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL:-}" ]; then
            RESULT=$(cat result.txt || echo "unknown")
            PAYLOAD=$(printf '{"text":"🧪 Staging release *%s* status: %s"}' "$TAG" "$RESULT")
            curl -s -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL" >/dev/null
          fi

  # 4) Deploy to Production：需 reviewers；失敗自動清理；使用 environment secret 發 Slack
  deploy-production:
    name: Deploy to Production
    needs: [versioning, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Create Production Release
        id: release_prod
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG:  ${{ needs.versioning.outputs.tag_prod }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          set -e
          echo "Releasing $TAG"
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          if ! gh release create "$TAG" build.zip --notes "$NOTE" --latest ; then
            echo "Release failed, cleaning up…"
            gh release delete "$TAG" -y >/dev/null 2>&1 || true
            git tag -d "$TAG" 2>/dev/null || true
            echo "fail" > result.txt
            exit 1
          else
            echo "success" > result.txt
          fi

      - name: Slack notify (production)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TAG:  ${{ needs.versioning.outputs.tag_prod }}
        run: |
          if [ -n "${SLACK_WEBHOOK_URL:-}" ]; then
            RESULT=$(cat result.txt || echo "unknown")
            PAYLOAD=$(printf '{"text":"🚀 Production release *%s* status: %s"}' "$TAG" "$RESULT")
            curl -s -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_WEBHOOK_URL" >/dev/null
          fi
