name: CI/CD Pipeline ‚Äî Outstanding (O Grade)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # üß© 1Ô∏è‚É£ Auto Versioning
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: bump
        run: |
          git fetch --tags
          LATEST=$(git tag -l "v*" | sort -V | tail -n1)
          if [ -z "$LATEST" ]; then
            LATEST="v1.0.0"
          fi
          echo "Latest version: $LATEST"
          NEW=$(echo "$LATEST" | awk -F. -v OFS=. '{$NF++; print}')
          echo "New version: $NEW"
          echo "new_version=$NEW" >> $GITHUB_OUTPUT

  # üß± 2Ô∏è‚É£ Build + Lint + Test (Matrix Node)
  build:
    needs: versioning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci || npm install

      - name: Run lint and tests
        run: |
          npm run lint --if-present
          npm test --if-present

      - name: Build project
        run: |
          npm run build || echo "No build script found."
          zip -r build.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          if-no-files-found: error
          retention-days: 7

  # üöÄ 3Ô∏è‚É£ Deploy to Staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create staging release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-${{ needs.versioning.outputs.version }}
          NOTE: "Testing pre-production release"
        run: |
          echo "Deploying staging: $TAG"
          gh release delete "$TAG" -y || true
          gh release create "$TAG" build.zip --notes "$NOTE" --prerelease

      - name: Notify Slack (staging)
        if: always()
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"üß™ *Staging deployed:* $TAG\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi

  # üåç 4Ô∏è‚É£ Deploy to Production
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create production release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-${{ needs.versioning.outputs.version }}
          NOTE: "Production release version ${{ needs.versioning.outputs.version }}"
        run: |
          echo "Deploying production: $TAG"
          gh release delete "$TAG" -y || true
          set +e
          gh release create "$TAG" build.zip --notes "$NOTE" --latest
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "‚ö†Ô∏è Release failed ‚Äî performing rollback"
            gh release delete "$TAG" -y || true
            exit 1
          fi

      - name: Notify Slack (production)
        if: always()
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"üöÄ *Production deployed:* $TAG (status: ${{ job.status }})\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
