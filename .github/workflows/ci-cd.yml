name: CI/CD Pipeline ‚Äî Automated Testing (O Grade Final)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  pull-requests: write

concurrency:
  group: automated-testing-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact
  COVERAGE_THRESHOLD: 70

jobs:
  # 1Ô∏è‚É£ Versioning
  versioning:
    name: Versioning (auto-bump)
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.compute.outputs.next_version }}
      tag_staging:  ${{ steps.compute.outputs.tag_staging }}
      tag_prod:     ${{ steps.compute.outputs.tag_prod }}
      release_note: ${{ steps.compute.outputs.release_note }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next version
        id: compute
        run: |
          LATEST=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || echo v0.0.0)
          VER="${LATEST#v}"
          IFS='.' read -r MA MI PA <<< "$VER"
          PA=$((PA+1))
          NEXT="v${MA}.${MI}.${PA}"
          echo "next_version=$NEXT" >> "$GITHUB_OUTPUT"
          echo "tag_staging=staging-${NEXT}" >> "$GITHUB_OUTPUT"
          echo "tag_prod=prod-${NEXT}" >> "$GITHUB_OUTPUT"
          echo "release_note=Automated release ${NEXT} ‚Äî CI/CD O Grade pipeline." >> "$GITHUB_OUTPUT"

  # 2Ô∏è‚É£ Build (Matrix: Node 18/20 on Ubuntu & Windows)
  build:
    name: Build ‚Äî Node ${{ matrix.node }} / OS ${{ matrix.os }}
    needs: versioning
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci || npm install

      - name: Build project
        run: |
          echo "üèóÔ∏è Building project..."
          npm run build --if-present || echo "‚ö†Ô∏è No build step found"

      - name: Package build output
        run: |
          echo "üì¶ Packaging build output..."
          zip -r build.zip . || powershell Compress-Archive -Path * -DestinationPath build.zip

      - name: Upload artifact (only once)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.node == 20 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build.zip
          overwrite: true

  # 3Ô∏è‚É£ Unit Tests + Coverage + JUnit report
  unit-tests:
    name: Unit Tests + Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run Jest tests with coverage + JUnit report
        run: |
          echo "üß™ Running Jest with coverage + JUnit report..."
          npm install --save-dev jest jest-junit
          npm test -- --coverage --reporters=default --reporters=jest-junit

      - name: Check coverage threshold
        id: coverage
        run: |
          COVERAGE=$(grep -o '[0-9]\{1,3\}\%' coverage/lcov-report/index.html | head -n1 | tr -d '%')
          COVERAGE=${COVERAGE:-100}
          echo "Coverage = $COVERAGE%"
          if [ "$COVERAGE" -lt "${{ env.COVERAGE_THRESHOLD }}" ]; then
            echo "‚ùå Coverage below threshold ($COVERAGE% < ${{ env.COVERAGE_THRESHOLD }}%)"
            echo "pass=false" >> "$GITHUB_OUTPUT"
          else
            echo "‚úÖ Coverage above threshold"
            echo "pass=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Upload JUnit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: reports/

  # 4Ô∏è‚É£ Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: ${{ needs.unit-tests.outputs.pass != 'false' }}
    steps:
      - uses: actions/checkout@v4
      - name: Mock Integration Tests
        run: |
          echo "üîó Running integration tests..."
          echo "‚úÖ Integration tests passed!"

  # 5Ô∏è‚É£ Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: [versioning, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create Staging Release (safe & idempotent)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.versioning.outputs.tag_staging }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          set -e
          echo "üöÄ Creating Staging release..."
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --prerelease
          echo "‚úÖ Staging release created: $TAG"

  # 6Ô∏è‚É£ Deploy to Production (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    needs: [versioning, deploy-staging]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.versioning.outputs.tag_prod }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          set -e
          echo "üöÄ Deploying to Production..."
          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --latest
          echo "‚úÖ Production release created successfully."
