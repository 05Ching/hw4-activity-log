name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:
  contents: write
  deployments: write

concurrency:
  group: release-pipeline-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # 1) Build & Self-Test (避免 Run ./ 缺 input 的錯誤)
  build:
    name: Build & Self-Test (dry-run)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install & Build
        run: |
          npm ci || npm i
          npm run build || echo "No build script, skipping..."
          zip -r build.zip .

      # ✅ 正確提供 action 需要的 inputs，避免 "Input required and not supplied: GITHUB_TOKEN"
      - name: Action self-test (dry run)
        uses: ./
        with:
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.TOKEN || secrets.GITHUB_TOKEN }}
          DRY_RUN: true
          EVENT_LIMIT: 5
          OUTPUT_STYLE: MARKDOWN
          README_PATH: README.md

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          if-no-files-found: error
          retention-days: 7

  # 2) Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_NUMBER: ${{ github.run_number }}
          BUILD_TAG_CANDIDATE: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
          TAG_PREFIX: ${{ vars.TAG_PREFIX || 'staging' }}
        run: |
          # 決定 TAG：若環境變數提供合規 tag 就用；否則 fallback 為 staging-v<run_number>
          TAG="$BUILD_TAG_CANDIDATE"
          if [ -z "$TAG" ] || ! printf '%s' "$TAG" | grep -Eq '^[A-Za-z0-9._-]+$' || printf '%s' "$TAG" | grep -q '{'; then
            TAG="${TAG_PREFIX}-v${RUN_NUMBER}"
          fi

          NOTE="${RELEASE_NOTE:-Testing pre-production release}"
          echo "Deploying Staging Release: $TAG"

          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --prerelease

  # 3) Deploy to Production（需環境審核）
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production   # 設定 Required reviewers 後，這裡會等待核准
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_NUMBER: ${{ github.run_number }}
          BUILD_TAG_CANDIDATE: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
          TAG_PREFIX: ${{ vars.TAG_PREFIX || 'prod' }}
        run: |
          TAG="$BUILD_TAG_CANDIDATE"
          if [ -z "$TAG" ] || ! printf '%s' "$TAG" | grep -Eq '^[A-Za-z0-9._-]+$' || printf '%s' "$TAG" | grep -q '{'; then
            TAG="${TAG_PREFIX}-v${RUN_NUMBER}"
          fi

          NOTE="${RELEASE_NOTE:-Production release}"
          echo "Deploying Production Release: $TAG"

          gh release delete "$TAG" -y >/dev/null 2>&1 || true
          gh release create "$TAG" build.zip --notes "$NOTE" --latest
