name: CI/CD Pipeline — Automated Testing (Simulated Failure)

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Semver bump type: major | minor | patch'
        required: true
        default: 'patch'
      note:
        description: 'Release notes (optional)'
        required: false
  push:
    branches: [ main, master ]

permissions:
  contents: write
  deployments: write
  pull-requests: write

concurrency:
  group: automated-testing-failure-${{ github.ref }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact
  LINT_CMD: npm run lint --if-present
  TEST_CMD: npm test --if-present

jobs:
  # 1️⃣ 自動版本號
  versioning:
    name: Versioning (auto-bump)
    runs-on: ubuntu-latest
    outputs:
      base_version: ${{ steps.compute.outputs.base_version }}
      next_version: ${{ steps.compute.outputs.next_version }}
      tag_staging:  ${{ steps.compute.outputs.tag_staging }}
      tag_prod:     ${{ steps.compute.outputs.tag_prod }}
      release_note: ${{ steps.compute.outputs.release_note }}
    steps:
      - name: Checkout (full history for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute next version
        id: compute
        env:
          BUMP: ${{ github.event.inputs.bump || 'patch' }}
          NOTE_IN: ${{ github.event.inputs.note }}
        run: |
          set -euo pipefail
          LATEST=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          if [ -z "${LATEST:-}" ]; then
            LATEST="v0.0.0"
          fi
          VER="${LATEST#v}"
          IFS='.' read -r MA MI PA <<< "$VER"
          case "${BUMP}" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch|*) PA=$((PA+1)) ;;
          esac

          NEXT="v${MA}.${MI}.${PA}"
          STAGING="staging-${NEXT}"
          PROD="prod-${NEXT}"
          NOTE="${NOTE_IN:-Automated release ${NEXT} — simulated test failure demo.}"

          echo "base_version=${LATEST}"       >> "$GITHUB_OUTPUT"
          echo "next_version=${NEXT}"         >> "$GITHUB_OUTPUT"
          echo "tag_staging=${STAGING}"       >> "$GITHUB_OUTPUT"
          echo "tag_prod=${PROD}"             >> "$GITHUB_OUTPUT"
          echo "release_note=${NOTE}"         >> "$GITHUB_OUTPUT"

  # 2️⃣ Build Job
  build:
    name: Build — Node ${{ matrix.node }}
    needs: versioning
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        run: npm ci || npm install

      - name: Lint
        run: ${{ env.LINT_CMD }}

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          npm run build --if-present || echo "No build script, skipping actual build"

      - name: Package build output
        run: zip -r build.zip .

      - name: Upload artifact (Node 20 only)
        if: ${{ matrix.node == 20 }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: build.zip
          retention-days: 7
          overwrite: true

  # 3️⃣ ❌ 測試階段：模擬失敗
  test:
    name: Automated Tests (Simulated Failure)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run Automated Tests (Simulated Failure)
        run: |
          echo "🧪 Running simulated test..."
          echo "❌ Mock test failed intentionally!"
          exit 1   # 強制測試失敗

  # 4️⃣ Deploy to Staging（測試失敗 → 不執行）
  deploy-staging:
    name: Deploy to Staging
    needs: [versioning, test]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create Staging Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG:  ${{ needs.versioning.outputs.tag_staging }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          echo "🚀 Should not reach here — tests failed, this should be skipped."

  # 5️⃣ Deploy to Production（一樣會被 skipped）
  deploy-production:
    name: Deploy to Production
    needs: [versioning, deploy-staging]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create Production Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG:  ${{ needs.versioning.outputs.tag_prod }}
          NOTE: ${{ needs.versioning.outputs.release_note }}
        run: |
          echo "🚀 Should not reach here — skipped because tests failed."
