name: CI/CD Deployment Pipeline

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # üß± Step 1Ô∏è‚É£ Build Job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          npm install || true
          npm run build || echo "No build script found, skipping..."
          zip -r build.zip .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # üöÄ Step 2Ô∏è‚É£ Deploy to Staging
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Create staging release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TAG: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          echo "Deploying Staging Release: $BUILD_TAG"
          gh release delete "$BUILD_TAG" -y || true
          gh release create "$BUILD_TAG" build.zip --notes "$RELEASE_NOTE" --prerelease

  # üåç Step 3Ô∏è‚É£ Deploy to Production (manual approval)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Create production release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_TAG: ${{ vars.BUILD_TAG }}
          RELEASE_NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          echo "Deploying Production Release: $BUILD_TAG"
          gh release delete "$BUILD_TAG" -y || true
          gh release create "$BUILD_TAG" build.zip --notes "$RELEASE_NOTE" --latest
